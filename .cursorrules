​.cursorrules

<project>
You want a Vue application that displays "Hello world!" on top of any YouTube video you’re watching when you press "CTRL + SHIFT + F3". This implies a browser-based solution, likely a browser extension or userscript, built with Vue to inject content into YouTube pages.
</project>

<Project Technologies>
Frontend Framework: Vue 3
UI Library: Vue-specific libraries like Vuetify or none (plain Vue)
Styling: Tailwind CSS
Programming Language: TypeScript
Testing Frameworks:
Unit Testing: Jest (with Vue Test Utils)
End-to-End Testing: Cypress
AI Integration: Utilize AI models for generating summaries (optional)
Reason: Kept as a potential feature, though not directly tied to the "Hello world!" overlay unless you expand the scope.
Popup/Overlay Implementation:
Browser Extension APIs (e.g., Chrome Extension or Firefox WebExtensions API) instead of Windows API
Reason: Windows API isn’t suitable for web overlays; browser extension APIs allow injecting Vue components into YouTube pages and detecting "CTRL + F3".
Backend: Node.js (optional)
Reason: Only needed if you add server-side features (e.g., storing video preferences); likely not required for the core functionality.
Database: None (unless expanded scope requires it)
Reason: A simple overlay doesn’t need persistent storage.
Deployment:
Browser Extension Stores (e.g., Chrome Web Store) or local userscript
Reason: Vercel isn’t ideal for browser extensions; deployment will depend on whether you build an extension or a userscript.
</Project Technologies>

<tools>
#internal tools
run_terminal_cmd - Executes terminal commands
  - Parameters: command, is_background, require_user_approval, explanation
codebase_search - Semantic codebase search
  - Parameters: query, target_directories, explanation
read_file - Reads file contents
  - Parameters: relative_workspace_path, start_line_one_indexed, end_line_one_indexed_inclusive, should_read_entire_file, explanation
list_dir - Lists directory contents
  - Parameters: relative_workspace_path, explanation
grep_search - Regex search in text
  - Parameters: query, case_sensitive, include_pattern, exclude_pattern, explanation
edit_file - Proposes file edits
  - Parameters: target_file, instructions, code_edit
file_search - Fuzzy file path search
  - Parameters: query, explanation
delete_file - Deletes files
  - Parameters: target_file, explanation
reapply - Reapplies last edit
  - Parameters: target_file
fetch_rules - Fetches rules provided by the user
  - Parameters: rule_names
</tools>

<command_line_tools>
#Project specific tools, please execute using run_terminal_cmd tool
{
  "tools": {
    "translations": {
      "description": "Tools for managing translations and localization",
      "tool": "run_terminal_cmd",
      "command": "npm run",
      "options": {
        "check-translations": "Compare English, Finnish and Swedish translation files for completeness and missing keys",
        "import-translations:local": "Import translations for local development environment",
        "import-translations:prod": "Import translations for production environment"
      }
    },
    "seed": {
      "description": "Tools for seeding development and production data",
      "tool": "run_terminal_cmd",
      "command": "npm run",
      "options": {
        "seed:users": "Seed users data for development environment",
        "seed:users:local": "Seed users data for local development",
        "seed:users:prod": "Seed users data for production environment",
        "seed:blog:local": "Seed blog data for local development",
        "seed:blog:prod": "Seed blog data for production environment"
      }
    },
    "supabase": {
      "description": "Manages Supabase database migrations, schema updates, and content seeding",
      "tool": "run_terminal_cmd",
      "command": "supabase",
      "options": {
        "migration": {
          "new": "Create a new migration file"
        },
        "db": {
          "push": "Push database migration changes",
          "reset": "Reset the database"
        },
      },
    },
    "recraft": {
      "description": "Generates images using Recraft V3 API (SOTA text-to-image model)",
      "tool": "run_terminal_cmd",
      "command": "npm run recraft",
      "options": {
        "prompt": "Text description of the desired image",
        "style": "(Optional) Image style to use (default: digital_illustration). Available styles:\n
        - realistic_image (and variants: b_and_w, hard_flash, hdr, natural_light, studio_portrait, enterprise, motion_blur)\n
        - digital_illustration (and variants: pixel_art, hand_drawn, grain, infantile_sketch, 2d_art_poster, handmade_3d, hand_drawn_outline, engraving_color, 2d_art_poster_2)",
        "negative-prompt": "(Optional) Things to avoid in the image",
        "width": "(Optional) Image width in pixels. Available sizes: 1024, 1365, 1536, 1820, 2048, 1434, 1280, 1707 (default: 1024)",
        "height": "(Optional) Image height in pixels. Available sizes: 1024, 1365, 1536, 1820, 2048, 1434, 1280, 1707 (default: 1024)",
        "num-outputs": "(Optional) Number of images to generate (default: 1)",
        "seed": "(Optional) Random seed for reproducibility",
        "folder": "(Optional) Output folder path",
        "filename": "(Optional) Output filename"
      },
      "requires": ["REPLICATE_API_TOKEN in .env"],
      "example": "npm run recraft -- --prompt \"A modern logo with blue background\" --style realistic_image --folder public/images --filename logo.png"
    },
    "image-optimizer": {
      "description": "Optimizes images with background removal, resizing, and format conversion using Sharp and Replicate's remove-bg model",
      "tool": "run_terminal_cmd",
      "command": "npm run optimize-image",
      "options": {
        "input": "Path to input image",
        "output": "Path to output image",
        "remove-bg": "(Optional) Remove image background using AI",
        "resize": "(Optional) Resize image (format: WIDTHxHEIGHT, e.g. 800x600)",
        "format": "(Optional) Convert to format (png, jpeg, or webp)",
        "quality": "(Optional) Set output quality (1-100, default: 80)"
      },
      "requires": [
        "REPLICATE_API_TOKEN in .env",
        "sharp package (npm install sharp)"
      ],
      "example": "npm run optimize-image -- input.png output.webp --resize 512x512 --format webp --quality 90"
    },
    "html-to-md": {
      "description": "Scrapes a webpage and converts its HTML content to Markdown format using Turndown service",
      "tool": "run_terminal_cmd",
      "command": "npm run html-to-md",
      "options": {
        "url": "URL of the webpage to scrape",
        "output": "(Optional) Output file path for the markdown (default: output.md)",
        "selector": "(Optional) CSS selector to target specific content"
      },
      "requires": [
        "Node.js >= 14",
        "turndown package",
        "axios package"
      ],
      "example": "npm run html-to-md -- --url https://example.com --output docs/scraped.md --selector main"
    },
    "tavily-search": {
      "description": "Executes AI-powered web search using Tavily API with three search methods: standard search, context search, and question-answering",
       "tool": "run_terminal_cmd",
      "command": "npm run tavily-search",
      "options": {
        "query": "Search query text",
        "type": "(Optional) Search type: 'search' (default), 'context' for token-limited content, or 'qna' for direct answers",
        "depth": "(Optional) Search depth: 'basic' (default) or 'advanced'. QNA type defaults to 'advanced'",
        "max-results": "(Optional) Maximum number of results (default: 5)",
        "include": "(Optional) Comma-separated list of domains to include",
        "exclude": "(Optional) Comma-separated list of domains to exclude",
        "topic": "(Optional) Search topic: 'general' (default) or 'news'",
        "days": "(Optional) Number of days back for news search (default: 3)",
        "time-range": "(Optional) Time range for search results (e.g., '1d', '1w', '1m')",
        "max-tokens": "(Optional) Maximum tokens for context search (default: 4000)",
        "include-images": "(Optional) Include images in search results (default: false)",
        "include-image-descriptions": "(Optional) Include image descriptions (default: false)",
        "include-answer": "(Optional) Include short answer to query (default: false)",
        "include-raw-content": "(Optional) Include raw HTML content (default: false)"
      },
      "requires": [
        "TAVILY_API_KEY in .env",
        "@tavily/core package"
      ],
      "examples": [
        "Standard search: npm run tavily-search -- --query \"Next.js best practices\" --depth advanced --max-results 10 --include-answer",
        "Context search: npm run tavily-search -- --query \"React hooks guide\" --type context --max-tokens 2000",
        "Q&A search: npm run tavily-search -- --query \"What is the capital of France?\" --type qna"
      ]
    },
    "gemini": {
      "description": "Interacts with Google's Gemini API for text generation, chat, and multimodal tasks with advanced configuration options",
      "tool": "run_terminal_cmd",
      "command": "npm run gemini",
      "options": {
        "prompt": "Text prompt or question for the model",
        "model": "(Optional) Model to use: 'gemini-2.0-flash-001' (default), 'gemini-2.0-flash-001', 'Gemini-Exp-1206', 'Gemini-2.0-Flash-Thinking-Exp-1219'",
        "temperature": "(Optional) Sampling temperature between 0.0 and 1.0 (default: 0.7)",
        "max-tokens": "(Optional) Maximum number of tokens to generate (default: 2048)",
        "image": "(Optional) Path to image file for vision tasks",
        "chat-history": "(Optional) Path to JSON file containing chat history",
        "stream": "(Optional) Stream the response (default: false)",
        "safety-settings": "(Optional) JSON string of safety threshold configurations",
        "schema": "(Optional) JSON schema for structured output"
      },
      "requires": [
        "GOOGLE_AI_STUDIO_KEY in .env",
        "@google/generative-ai package"
      ],
      "example": "npm run gemini -- --prompt \"What is the capital of France?\" --model gemini-2.0-flash-001 --temperature 0.7"
    },
    "download-file": {
      "description": "Downloads files from URLs with progress tracking, automatic file type detection, and customizable output paths",
      "tool": "run_terminal_cmd",
      "command": "npm run download-file",
      "options": {
        "url": "URL of the file to download",
        "output": "(Optional) Complete output path including filename",
        "folder": "(Optional) Output folder path (default: downloads)",
        "filename": "(Optional) Output filename (if not provided, derived from URL or content)"
      },
      "requires": [
        "axios package",
        "cli-progress package",
        "mime-types package"
      ],
      "example": "npm run download-file -- --url https://example.com/image.jpg --folder public/images --filename downloaded-image.jpg"
    },
    "flux": {
      "description": "Generates images using Flux 1.1 Pro API (high quality text-to-image model)",
      "tool": "run_terminal_cmd",
      "command": "npm run flux",
      "options": {
        "prompt": "Text description of the desired image",
        "prompt-upsampling": "(Optional) Enable prompt upsampling for better results (default: true)",
        "num-outputs": "(Optional) Number of images to generate (default: 1)",
        "seed": "(Optional) Random seed for reproducibility",
        "folder": "(Optional) Output folder path (default: public/images)",
        "filename": "(Optional) Output filename"
      },
      "requires": ["REPLICATE_API_TOKEN in .env"],
      "example": "npm run flux -- --prompt \"A modern logo with blue background\" --folder public/images --filename logo.webp"
    },
    "send-email-sendgrid": {
      "description": "Sends emails using SendGrid API with support for templates and dynamic data",
      "tool": "run_terminal_cmd",
      "command": "npm run send-email-sendgrid",
      "options": {
        "to": "Recipient email address",
        "subject": "Email subject line",
        "message": "Email message content (HTML supported)",
        "template-id": "(Optional) SendGrid template ID",
        "dynamic-template-data": "(Optional) JSON string of dynamic template data"
      },
      "requires": [
        "SENDGRID_API_KEY in .env"
      ],
      "example": "npm run send-email-sendgrid -- --to recipient@example.com --subject \"Hello\" --message \"<h1>Hi there!</h1><p>This is a test email.</p>\""
    },
    "generate-video": {
      "description": "Generates videos using various Replicate API models including Minimax, Hunyuan, Mochi, and LTX",
      "tool": "run_terminal_cmd",
      "command": "npm run generate-video",
      "options": {
        "prompt": "Text description of the desired video",
        "model": "(Optional) Model to use: minimax (default), hunyuan, mochi, or ltx",
        "duration": "(Optional) Duration of the video in seconds (model-specific limits apply)",
        "image": "(Optional) Path to input image for image-to-video generation",
        "output": "(Optional) Output filename",
        "folder": "(Optional) Output folder path (default: public/videos)"
      },
      "requires": [
        "REPLICATE_API_TOKEN in .env",
        "replicate package",
        "ora package",
        "chalk package"
      ],
      "example": "npm run generate-video -- --prompt \"A serene ocean wave rolling onto a beach\" --model minimax --duration 5 --output beach-wave.mp4"
    }
  }
}
</command_line_tools>

<documentation>
  The system is documented in the docs folder under following documents.
    @readme.md:
	- provide all reasonable informaation about project and deployment
    @description.md:
        - Provide concise description of the app or system idea
        - Document core use cases and features
    @architecture.md:
        - Define full technical stack (frontend/backend frameworks, databases, testing frameworks)
        - Folder structure
    @datamodel.md:
        - Document all entities, attributes and relationships in a concise way
    @frontend.md:
        - List and describe all views/screens
        - Define UI/UX patterns and styling approach
    @backend.md:
        - Document all API endpoints and authentication
        - Define service architecture and components
    @todo.md
        - Tasks by logical areas and mark their status (✅ done, ⏳ in progress, ❌ not started). Next priority tasks in the end.
        - Prefer full stack tasks.
    @ai_changelog.md
        - Changelog of changes done
    @learnings.md
        - Consise technical learnings and best practices discovered during development
        - Solutions to occurred errors, including potential links

  /.cursor/rules folder contains following files that contains design pattens and implementations instructions for different types of components:
    @add-data-model.mdc - How to add a new data model to the application
    @admin-api-protection.mdc - How to protect the admin API
    @implement-frontend-page.mdc - How to implement a new frontend page
    @implement-nextjs-api.mdc - How to implement a new NextJS API route
    @implement-unit-tests.mdc - How to implement unit tests for the application
       
  Following files describe the currently used libraries and brand information:
    @package.json:
      - list of used npm packages and their versions
    lib/@brand-info.ts
      - Brand information for the application, used in generation of content  
</documentation>

<actions>
  <use_tools>
    - Use tools to get information and execute tasks.
    - Tools are listed in the tools/ directory.
    - Tools are executed using the run_terminal_cmd tool.
    - Tools are executed in the order of their definition in the .cursorrules file.
  </use_tools>

  <document>
     Scan, read and update documents under documentation tag according to instructions.
  </document>

  <research>
  Perform a comprehensive study and chain of thought reasoning of what to do. Steps:
    1. Scan the whole @docs folder and read all necessary files for getting context
    2. Run fetch_rules for fetching user provided rules and instructions
    3. execute codebase_search for finding relevant files and methods first for getting furher context.
    4. Use tool tavily-search the web for up-to-date documentation and getting started. Run at least one query always.
    5. After you have all the context, perform chain of thoughts using this format:
      5.1. "Reading required files..."
      5.2. "Analysis: what I found in the files..."
      5.3. "Plan: what needs to be done, what tools I need..."
      5.4. "Implementation: how I'll do it..."
      5.5. "Need more info: what more do I need to know..."
    6. Present the questions for the user to refine the plan
  </research>

  <fix>
  Perform a comprehensive study and chain of thought reasoning of what might cause the error and fix it.
    1. read_file learnings.md from the docs folder if you have an ready solutions for this
    2. Read all url's present in the error description
    3. Run fetch_rules for fetching user provided rules and instructions
    4. Use tool tavily-search for searching the web for the quick error resolutions.
    5. Fix and validate the error in following loop
      - Reflect on 5-7 different possible sources of the problem, distill them into a 1-2 likely ones and add logs to the code to validate them.
      - Run a test to validate the logs
      - Implement a fix based on the results and logs
      - Validate the fix
      - If if helped, write learnings.md what was the resolution and delete /temp/fix_backlog.md
      - If if did not help, open up a temp file in /temp/fix_backlog.md and update what was tried and what did not work. Continue back to implement fix.
  </fix>

  <validate>
  Write comprehensive tests, run them and fix any errors.
   1. read_file architecture.md for understanding of code structure and test practises
   2. Run fetch_rules for fetching user provided rules and instructions
   3. write unit tests for the feature
   4. execute unit tests and fix each errors according to <fix> process
   5. write e2e tests for the feature
   6. execute e2e and fix each errors according to <fix> process
   7. On each fixed and validated bug, document the working error resolutions to learnings.md, including any links that you found usable.
   8. Repeat until all tests succeed
  </validate>

  <record>
   Record the changes done and update backlog
   1. write summary of what you did in the ai_changelog.md and update the todo list in the todo.md (do not remove any tasks, just update their status)
  </record>

  <design>
   Design a feature.
   1. read_file frontend.md for understanding the UI requirements and specifications like colors
   2. please design the frontend of the application or feature and document that to frontend.md
   3. generate any images or illustrations needed in the feature (prefer flux over recraft, unless you need text in the image)
   4. optimise the generated images
   5. write short instructions for the developer to communicate the design and images
  </design>

  <develop>
   Develop a feature.
    1. Run fetch_rules for fetching user provided rules and instructions for page and api implementation
    2. Develop the full e2e code changes for the requested feature
  </develop>

  <invent>
    1. please implement a tool in the tools/ directory and write a tool description in .cursorrules file.
    2. Execute the tool and fix any errors until it succesfully returns the results you wanted
  </invent>

  <commit>
    1. please commit all pending changes using git add . and git commit with descriptive message
  </commit>
</actions>

For each request, please execute the following steps one by one.":

1. First check if user requests tool use, if so, execute the tool and return the results and stop here.
2. Read all files in the docs folder and list all areas of the architecture that this request might affect (frontend, backend, database, unit tests, e2e tests, documentation)
3. Analyze the request and list required actions from actions list, do not start executing the actions yet. Present analysis with:
   "Request type: [type]"
   "Required actions in order:"
   1. [action 1]
   2. [action 2]
   ...

4. If the task consists of multiple actions, write the task plan to the @todo.md file by splitting the tasks into smaller parts. Each part should contain all actions to be done for the feature, including e.g. writing unit tests, executing unit tests, writing documentation, etc.
 
5. Execute the plan or task. For each action:
   - State "Starting [action]..."
   - Read the files and instructions specified in the task definition and execute the actions mentioned in the task plan.
   - Show "Completed [action]"
   - Ask "Would you like to proceed to [next action] or do you need any adjustments?"
   - Wait for explicit confirmation before proceeding to next action
   - Exit the loop when all actions are completed

6. After final action:
   - Summarize all changes made
   - If the whole task is completed and user is happy, document completed work in relevant files:
     - ai_changelog.md: What was done
     - todo.md: Update task status
     - learnings.md: For any solutions/fixes
     - Other relevant documentation

Please provide your request and you will analyze it according to this process.

Important rules for actions:
- Do not ever create a new project, scan the folders to understand the project structure.
- Do not rely on current knowledge about libraries, always search the web for up-to-date information
- Always install the latest version of the libraries
- Be cautious on deleting and replacing code that might be already working or used in another part of the application.
- Always read the files and instructions specified in the task definition and execute the actions mentioned in the task plan.

You have one mission: execute *exactly* what is requested.

Produce code that implements precisely what was requested - no additional features, no creative extensions. Follow instructions to the letter.

Confirm your solution addresses every specified requirement, without adding ANYTHING the user didn't ask for. The user's job depends on this — if you add anything they didn't ask for, it's likely they will be fired.

Your value comes from precision and reliability. When in doubt, implement the simplest solution that fulfills all requirements. The fewer lines of code, the better — but obviously ensure you complete the task the user wants you to.

At each step, ask yourself: "Am I adding any functionality or complexity that wasn't explicitly requested?". This will force you to stay on track.
